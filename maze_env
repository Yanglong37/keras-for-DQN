import time
import numpy as np
import tkinter as tk

seed = np.random.seed(6)

class environment(tk.Tk,object):
    def __init__(self):
        super(environment, self).__init__()
        self.w_num = 6      #width
        self.h_num = 6      #high
        self.unit = 40
        self.action = ['l','d','l','r']
        self.n_action = len(self.action)
        self.title('Maze')
        self.geometry('{0}x{1}'.format(self.w_num * self.unit,self.h_num * self.unit))
        self.create_env()



    def create_env(self):
        self.canvas = tk.Canvas(self,
                                bg = 'white',
                                height = self.h_num * self.unit,
                                width = self.w_num * self.unit)

        for x in range(0,self.w_num * self.unit,self.unit):
            start_x,start_y,end_x,end_y = x,0,x,self.h_num*self.unit
            self.canvas.create_line(start_x,start_y,end_x,end_y)
        for y in range(0,self.h_num * self.unit,self.unit):
            start_x,start_y,end_x,end_y = 0,y,self.w_num*self.unit,y
            self.canvas.create_line(start_x,start_y,end_x,end_y)

        self.maze = np.random.randint(0,10,size=(self.h_num,self.w_num))
        index = np.array(np.where(self.maze < 2))
        n_hell = len(index[0])
        origin = np.array([20,20])

        #绘制障碍物
        for i in range(n_hell):
            centre_hell = np.array([origin[0] + (self.unit*index[1,i]), origin[1] + (self.unit*index[0,i])])
            self.canvas.create_rectangle(centre_hell[0] - 15,centre_hell[1] - 15,
                                                        centre_hell[0] + 15,centre_hell[1] + 15,
                                                        fill = 'black')

        #绘制起始、终止点
        end = origin + np.array([self.unit * (self.w_num - 1),self.unit * (self.h_num - 1)])
        self.rect = self.canvas.create_rectangle(origin[0] - 15,origin[1] - 15,
                                                 origin[0] + 15,origin[1] + 15,
                                                 fill = 'red')
        self.oval = self.canvas.create_rectangle(end[0] - 15,end[1] - 15,
                                                 end[0] + 15,end[1] + 15,
                                                 fill = 'yellow')
        self.canvas.pack()

        # 初始化maze矩阵
        # 探险者：2
        # 目标：3
        # 可行路径：1
        # 障碍物：4
        self.start_maze = np.ones([self.h_num,self.w_num])
        for i in range(n_hell):
            self.start_maze[index[0,i],index[1,i]] = 4
        self.start_maze[0,0] = 2
        self.start_maze[self.h_num - 1, self.w_num - 1] = 3
        print(self.start_maze)


    def reset(self):
        self.update()
        self.canvas.delete(self.rect)
        time.sleep(0.1)
        origin = np.array([20,20])
        self.rect = self.canvas.create_rectangle(origin[0] - 15, origin[1] - 15,
                                                 origin[0] + 15, origin[1] + 15,
                                                 fill='red')
        self.maze = self.start_maze.copy()
        return self.maze


    def step(self,action):
        s = self.canvas.coords(self.rect)
        a,b = np.where(self.maze == 2)
        self.maze[a,b] = 0
        a_,b_ = a.copy(),b.copy()
        base = np.array([0,0])
        to_border = False               #边界检测
        #up
        if action == 0:
            if s[1] > self.unit:
                base[1] -= self.unit
                a -= 1
            else:
                to_border = True
        #down
        if action == 1:
            if s[1] < self.unit * (self.h_num-1):
                base[1] += self.unit
                a += 1
            else:
                to_border = True
        #left
        if action == 2:
            if s[0] > self.unit:
                base[0] -= self.unit
                b -= 1
            else:
                to_border = True
        #right
        if action == 3:
            if s[0] < self.unit * (self.w_num-1):
                base[0] += self.unit
                b += 1
            else:
                to_border = True

        self.canvas.move(self.rect,base[0],base[1])

        reward,done = 0,False
        if self.maze[a,b] == 0:
            reward = 0
            done = False
            self.maze[a_,b_] = 2
        if self.maze[a,b] == 1:
            reward = 0
            done = False
            self.maze[a,b] = 2
            self.maze[a_, b_] = 1
        if self.maze[a,b] == 4:
            reward = -1
            done = True
            self.maze[a,b] = 2
            self.maze[a_, b_] = 1
        if self.maze[a,b] == 3:
            reward = 10
            done = True
            self.maze[a,b] = 2
            self.maze[a_, b_] = 1
        # print(self.maze,reward,done,to_border)
        return (self.maze,reward,done,to_border)



    def render(self):
        time.sleep(0.01)
        self.update()



if __name__ == '__main__':
    env = environment()
    env.reset()
    # 终点测试

    env.step(1)
    env.render()
    env.step(1)
    env.render()
    env.step(1)
    env.render()
    env.step(1)
    env.render()
    env.step(1)
    env.render()
    env.step(3)
    env.render()
    env.step(3)
    env.render()
    env.step(3)
    env.render()
    env.step(3)
    env.render()
    env.step(3)
    env.mainloop()


    #边界测试
    '''
    env.step(2)
    env.mainloop()
    '''

    #障碍物测试
    '''
    env.step(1)
    env.render()
    env.step(3)
    env.mainloop()
    '''
